buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'http://dl.bintray.com/jfrog/jfrog-jars' }
        maven { url 'http://repo.rctanalytics.com/artifactory/plugins-release' }
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}

plugins {
    id 'net.researchgate.release' version '2.8.1'
    id 'com.sourcemuse.mongo' version '1.0.7'
    id 'com.jfrog.artifactory' version '4.21.0'
}

allprojects {
	repositories {
		jcenter()
	}
	apply plugin: 'maven-publish'
	apply plugin: 'java'
}

apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'com.sourcemuse.mongo'

archivesBaseName = 'quartz-mongodb'

jar {
    archiveVersion = projectVersion
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

configurations {
    provided
    implementation.extendsFrom provided
}
sourceSets {
    main { compileClasspath += configurations.provided }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
    classpath {
        downloadSources true
        downloadJavadoc true
    }
    jdt {
        sourceCompatibility java.sourceCompatibility
        targetCompatibility java.targetCompatibility
    }
}

dependencies {
    implementation("org.quartz-scheduler:quartz:2.3.2")
    implementation("org.mongodb:mongodb-driver-sync:4.0.5")
    implementation("commons-codec:commons-codec:1.10")
    implementation("org.apache.commons:commons-lang3:3.8")
    implementation("org.apache.httpcomponents:httpcore:4.4.10")
    implementation("org.slf4j:slf4j-api:1.7.21")

    compileOnly("org.clojure:clojure:1.10.0")

    testImplementation("org.clojure:clojure:1.10.0")
    testImplementation("joda-time:joda-time:2.8.2")
    testImplementation("org.slf4j:slf4j-simple:1.7.10")
    testImplementation("org.codehaus.groovy:groovy-all:2.5.12")
    testImplementation("org.spockframework:spock-core:1.3-groovy-2.5")
    testRuntimeOnly("cglib:cglib-nodep:3.1")
    testRuntimeOnly("org.objenesis:objenesis:2.1")
}

release {
    scmAdapters = [net.researchgate.release.GitAdapter]
    git {
        pushToRemote = 'origin'
    }

    versionPropertyFile = 'gradle.properties'
}

task sourceJar(type: Jar) {
    dependsOn classes
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier 'javadoc'
    from javadoc
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

artifacts {
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        quartzMongoDB(MavenPublication) {
            groupId    = 'com.novemberain'
            artifactId = archivesBaseName
            version    = projectVersion

            artifact sourceJar {
                classifier "sources"
            }

            from components.java
        }
    }
}

mongo {
    port 27017
    logging 'console'
    journalingEnabled true
}

test {
 beforeTest { descriptor ->
    logger.lifecycle("Running test \"${descriptor}\"")
 }
}

// force test runs even when there are no test changes,
// such test loops are very useful for testing race conditions
// and other concurrency hazards
test.outputs.upToDateWhen { false }

tasks.withType(Test) {
    runWithMongoDb = true
    mongo {
        journalingEnabled true
        port 27017
        logging 'console'
        mongoVersion 'PRODUCTION'
    }
}

//bintray {
//    user = System.getenv("BINTRAY_USERNAME")
//    key  = System.getenv("BINTRAY_API_KEY")
//    publications = ['quartzMongoDB']
//    pkg {
//        repo = 'maven'
//        name = 'quartz-mongodb'
//        labels = ['quartz', 'mongodb']
//        userOrg = 'michaelklishin'
//        licenses = ['Apache-2.0']
//        vcsUrl = 'https://github.com/michaelklishin/quartz-mongodb.git'
//
//        version {
//            name = projectVersion
//            desc = 'MongoDB-backed job store for the Quartz scheduler'
//			vcsTag = projectVersion
//        }
//    }
//}

artifactory {
    contextUrl = 'http://repo.rctanalytics.com/artifactory'
    publish {
        repository {
            repoKey = 'libs-release-thirdparty'
            username = 'jenkins'
        }
    }
    resolve {
        repository {
            repoKey = 'repo'
        }
    }
}
